Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для відстеження життєвих показників тварин за допомогою розумних нашийників

Студент гр. ПЗПІ-21-10         __________________ Бехов В.С.
                   (підпис)
Керівник роботи                     ___________________ доц. Лещинська І.О.
         (підпис)
Роботу захищено «__»_________2024 р.
з оцінкою _________________________

Комісія:                                    _________________ доц. Лещинський В.О.
(підпис)
     _________________ доц. Лещинська І.О.
(підпис)
       _________________ ст.викл. Сокорчук І.П.
(підпис)

Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук	   Кафедра програмної інженерії
Спеціальність 121 – Інженерія програмного забезпечення
Курс 		3	 Семестр 				6
Навчальна дисципліна Архітектура програмного забезпечення

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

				      Бехову Вадиму Сергійовичу
1. Тема проєкту:          Програмна система для відстеження життєвих показників тварин за допомогою розумних нашийників
2. Термін узгодження завдання курсової роботи « 20»     березня    2024 р.
3. Термін здачі студентом закінченої роботи «30»    травня           2024 р.
4. Вихідні дані до проєкту: результатом виконання лабораторних робіт має бути розроблена унікальна складна програмна система, яка складається з різних елементів (back-end, front-end, мобільний застосунок, IoT або Smart Device пристрій), яка передбачає монетизації, вирішує актуальну проблему, орієнтована на масового користувача, масштабована, підтримує інтернаціоналізацію та локалізацію, забезпечує захист персональних даних, має засоби адміністрування системи. Також має бути написаний документ Vision and Scope.
5.Зміст пояснювальної записки (перелік питань, що належить розробити)
Vision and Scope документ, back-end частина, опис інженерних рішень, загальна архітектура системи, будова серверних компонентів та бази даних, опис специфікації REST, частини програмного коду, програмне забезпечення для IoT або SmartDevice пристрою та опис його взаємодії з іншими частинами системи, прийняті інженерні рішення, частини коду, клієнтська (front-end частина) програмної системи та опис будови її веб-компонентів, програмний код та прийняті інженерні рішення, мобільний програмний застосунок, зразки його програмного коду та його будова й взаємодія з іншими частинами системи а також інженерні рішення
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси) UML діаграма розгортання, UML діаграма прецедентів, ER-модель даних, UML діаграма станів, UML діаграма взаємодії, UML діаграма діяльності, копії екранів («скріншоти») прикладної програми, приклади звітів прикладної програми






















КАЛЕНДАРНИЙ ПЛАН


№	Основні етапи виконання прокту в рамках лабораторних робіт	Терміни виконання етапів	Примітка
1	Функціональна специфікація
програмного проекту	28.03.2024
2	Проектування програмного
проекту	11.04.2024
3	Кодування програмного проекту	25.04.2024
4	Оформлення пояснювальної
записки	23.05.2024
5	Захист курсової роботи	30.05.2024

	Дата видачі теми проєкту «20	»       		березня	 	2024 р.

	Керівник			   	     			доц. Лещинська І.О.
				                              (підпис)

	Завдання прийняв до виконання
	ст. гр. ПЗПІ-21-10                              			            	Бехов В.С
						               (підпис)









РЕФЕРАТ


	Пояснювальна записка: 45 сторінок, 3 додатки, 7 рисунків, 3 таблиці, 5 переліків посилання.
	РОЗУМНИЙ НАШИЙНИК, ЖИТТЄВІ ПОКАЗНИКИ, ВІДСТЕЖЕННЯ ДАНИХ, АКТИВНІСТЬ, АНАЛІЗ ПОВЕДІНКИ, СИСТЕМА МОНИТОРИНГУ, ДАНІ, ДОГЛЯД, РЕАЛЬНИЙ ЧАС, ІСТОРІЯ ПОКАЗНИКІВ, РЕКОМЕНДАЦІЇ, ВЕТЕРИНАРІЯ, СЕНСОРИ, ТЕХНОЛОГІЇ, АВТОМАТИЗАЦІЯ
	 Об’єктом розробки є проблема відстеження життєвих показників тварин за допомогою розумних нашийників. Відстеження життєвих показників включає моніторинг стану здоров'я тварини, відстеження її активності, аналіз поведінки, а також забезпечення своєчасного виявлення можливих проблем зі здоров'ям. Усі ці процеси мають бути автоматизовані для полегшення роботи власників тварин і ветеринарів.
	Метою роботи є створення програмної системи для відстеження життєвих показників тварин, яка дозволяє моніторити стан здоров'я в режимі реального часу, аналізувати активність та поведінку, зберігати історію показників, та надавати рекомендації щодо догляду за тваринами на основі отриманих даних.
	В якості методів розробки було обрано: мову програмування Java Script та фреймворк Node JS для розробки серверної частини, реляційну модель бази даних SQL Server для зберігання даних користувачів, мову програмування Java Script та бібліотеку React для розробки клієнтської частини.
	В результаті виконання курсової роботи було спроєктовано та розроблено програмну систему для відстеження показників тварин, яка включає в себе серверну частину та клієнтську частину.




ЗМІСТ


Вступ…………………………………………………………………………………….7
1	Vision and Scope документ…………………...……………………..........................8
1.1.	Бізнес – вимоги…………………………..……………………………………...8
1.1.1.Передумови…………………………...……………………………………….8
1.1.2.Бізнес – можливості…………………………………………………………...8
1.1.3.Бізнес можливості……………………………………………………………..9
1.1.4.Потреби клієнтів на ринку…………………………………………………..10
1.1.5.Бізнес – ризики……………………………………………………………….11
1.2.Концепція рішення…………………………………………………………….12
1.2.1.Окреслення концепції………………………………………………………..12
1.2.2.Головна функціональність…………………………………………………..13
1.2.3.Припущення та залежності………………………………………………….14
1.3.Рамки та обмеження…………………………………………………………...15
1.3.1.Рамки первинного випуску………………………………………………….15
1.3.2.Рамки наступних випусків…………………………………………………..15
1.3.3.Обмеження та виключення………………………………………………….16
1.4.Бізнес – контекст……………………………………………………………….17
1.4.1.Профілі зацікавлених сторін………………………………………………...18
1.4.2.Пріорітети проекту…………………………………………………………..20
1.4.3.Робоче середовище…………………………………………………………..21
2	Розробка серверної частини програмної системи………………………………..22
2.1.	Проєктування серверної частини……………………………………………..22
2.2.	Опис бази даних та сховища даних…………………………………………...26
2.3.	Архітектура серверної частини……………………………………………….27
2.4.	Опис специфікації Rest API…………………………………………………...28
2.5.	Кодування серверної частини…………………………………………………28
2.6.	Опис дотриманих вимог щодо захисту даних та безпеки даних в системі….28
2.7.	Реалізація локалізації та інтернаціоналізації в системі……………………...29
3	Розробка клієнтської частини програмної системи……………………………...30
3.1.	Архітектура клієнтської частини………………………………………..........30
3.2.	Кодування клієнтської частини……………………………………….………31
Висновки……………………………………………………………………………….33
Перелік джерел посилання…………………………………………………………...34
Додаток А Таблиця для опису специфікації Rest API……………………………...35
Додаток Б Програмний код серверної частини……………………………………..37
Додаток В Програмний код клієнтської частини………………………………......39





















ВСТУП


	У сучасному світі ведеться постійна боротьба за збереження та покращення здоров'я та добробуту тварин, що має велике значення як для їх власників, так і для суспільства в цілому. Однак існують деякі труднощі у відстеженні та аналізі життєвих показників тварин, що можуть перешкоджати своєчасному виявленню проблем та прийняттю необхідних заходів для підтримання їхного здоров'я та благополуччя.
	Значна частина існуючих методів відстеження та моніторингу тварин базується на традиційних технологіях, таких як браслети або чіпи, які, хоча і ефективні до певної міри, пропонують обмежені можливості збору та аналізу даних про тварин. Розвиток інформаційних технологій відкриває нові перспективи для створення програмної системи, яка забезпечить повний та зручний моніторинг життєвих показників тварин.
	Використання сучасних сенсорів, мережевих технологій та штучного інтелекту може дозволити створити інтелектуальний нашийник, який не лише забезпечить точний збір даних, але й аналізуватиме їх, надаючи власникам та ветеринарним фахівцям цінну інформацію про стан тварини.
	Необхідність такої системи обумовлена розширенням поняття відповідальності за тварин та зростанням запиту на продукти, що дозволяють дотримуватися найвищих стандартів догляду за тваринами. Така програмна система може стати ефективним інструментом як для індивідуальних власників тварин, так і для ветеринарних клінік, притулків та наукових установ, що працюють у сфері тваринництва.
	Отже, метою курсової роботи є створення програмної система для відстеження показників тварин, яка складається з серверної та клієнтської частин, та вирішує проблеми відстеження показників тварин, та онлайн запису до ветеринарних клінік.

1 VISION AND SCOPE ДОКУМЕНТ
	1.1 Бізнес - вимоги


1.1.1	Передумови


	У сучасному світі ведеться постійна боротьба за збереження та покращення здоров'я та добробуту тварин, що має велике значення як для їх власників, так і для суспільства в цілому. Однак існують деякі труднощі у відстеженні та аналізі життєвих показників тварин, що можуть перешкоджати своєчасному виявленню проблем та прийняттю необхідних заходів для підтримання їхного здоров'я та благополуччя.


	1.1.2 Бізнес - можливості


	Розробка програмної системи для відстеження життєвих показників тварин за допомогою розумних нашийників відкриває широкі бізнес-можливості, оскільки така система може бути використана в різних галузях та сценаріях. Для аналізу бізнес-можливостей розглянемо деякі аналоги та конкурентів:
	Аналог 1: Традиційні методи відстеження тварин
	На сьогоднішній день більшість власників тварин використовують традиційні методи ідентифікації, такі як ошийники з маркуванням або чіпи. Проте ці методи мають обмежені можливості в зборі та аналізі даних про здоров'я тварини та її активність.
	Аналог 2: Сучасні системи відстеження тварин
	Деякі компанії пропонують сучасні системи відстеження тварин, які базуються на GPS-технологіях та мають обмежені функціональні можливості. Такі системи, зазвичай, фокусуються на відстеженні місцезнаходження тварини та не завжди забезпечують аналіз життєвих показників.
	Аналог 3: Медичні пристрої для тварин
	Деякі ветеринарні компанії розробляють медичні пристрої для відстеження життєвих показників тварин, такі як серцевий ритм, температура тіла тощо. Проте ці пристрої зазвичай є дорогими та не завжди зручними для використання в повсякденному житті власників тварин.
	Аналог 4: Системи моніторингу для сільського господарства
	У галузі сільського господарства існують системи моніторингу для відстеження здоров'я та активності худоби. Проте ці системи часто не оптимізовані для використання з домашніми тваринами та можуть бути недоступними для середнього власника.
	Розробка програмної системи для відстеження життєвих показників тварин за допомогою розумних нашийників відкриває можливості для створення продукту, який комбінує в собі переваги сучасних технологій зі зручністю використання та доступністю для власників тварин. Такий продукт може стати важливим інструментом для власників тварин, ветеринарних клінік та інших галузей, пов'язаних з доглядом за тваринами.


	1.1.3 Бізнес можливості


	Проєкт має наступні бізнес цілі:
	BO – 1 Забезпечення зростання використання системи для відстеження життєвих показників тварин на 30% протягом перших 12 місяців після запуску завдяки її високій ефективності та зручності використання.
	BO – 2 Привертання 50 нових корпоративних клієнтів для впровадження системи протягом перших 12 місяців після запуску, що дозволить розширити клієнтську базу та забезпечити стабільний ріст учасників платформи.
	BO – 3 Забезпечення 90% задоволеності користувачів системи на основі опитувань та відгуків протягом першого року роботи, що свідчить про успішність впровадження та відповідність функціоналу системи потребам користувачів.
	BO – 4 Максимізація прибутку компанії на 20% завдяки наданню додаткових послуг та розширенню функціоналу системи, що сприятиме залученню додаткових інвестицій та забезпечить стійкий фінансовий ріст.
	Критерії успіху проєкту включають:
	SC – 1 Успішне впровадження системи в не менше ніж 100 офісах та закладах догляду за тваринами протягом перших 12 місяців після запуску.
	SC – 2 Зростання обсягу використання системи на 40% протягом перших шести місяців роботи, що свідчить про активний інтерес користувачів та підтверджує ефективність розробленого рішення.
	SC – 3 Підвищення продуктивності користувачів системи на 30% завдяки автоматизації процесів та забезпеченню швидкого доступу до необхідної інформації.
	SC – 4 Забезпечення 95% задоволеності клієнтів на основі їх позитивного досвіду взаємодії з системою та високої оцінки якості наданих послуг.


	1.1.4 Потреби клієнтів та ринку


	Можна виділити наступні потреби клієнтів та ринку, на який орієнтується розроблюваний програмний продукт:
MN – 1 Надійна відстеження здоров'я та активності тварин: Клієнти шукають рішення, яке надасть їм можливість надійно відстежувати фізичний стан своїх тварин перед початком виконання ними різних функцій, таких як спортивні тренування, робота на фермі або пошук тварини в разі загублення.
MN – 2 Автоматизація процесу відстеження та аналізу даних: Користувачі бажають мати можливість автоматизовано отримувати інформацію про здоров'я та активність своїх тварин, що дозволить їм ефективно керувати доглядом та здоров'ям своїх улюбленців.
MN – 3 Зручний та доступний інтерфейс для взаємодії з системою: Клієнти шукають інтуїтивно зрозумілий та легко використовуваний інтерфейс, який дозволить їм максимально комфортно користуватися програмною системою для відстеження та аналізу даних про своїх тварин.
MN – 4 Можливість індивідуалізації та налаштування: Клієнти хочуть мати можливість налаштувати систему під свої потреби та вимоги, включаючи встановлення певних параметрів відстеження, отримання персоналізованих порад щодо догляду та тренування тварин тощо.
Програмна система розумних нашийників для тварин спрямована на задоволення цих потреб, надаючи клієнтам надійний та зручний інструмент для відстеження та підтримки здоров'я та благополуччя їх тварин.


1.1.5 Бізнес - ризики


	Для проекту програмної системи розумних нашийників для тварин можна ідентифікувати наступні бізнес-ризики:
BR – 1 Технічні проблеми: Існує ризик технічних проблем у функціонуванні самого нашийника, зокрема зв'язку з мобільними додатками та інтернетом, а також можливих несправностей у вбудованих сенсорах та інші технічні недоліки, що можуть призвести до незадоволення користувачів та втрати довіри до системи.
BR – 2 Конфіденційність та безпека даних: Ризик порушення конфіденційності особистих даних користувачів та їх тварин, а також загрози кібербезпеки, включаючи можливість несанкціонованого доступу до даних про місцезнаходження тварин та інших приватних інформаційних даних.
BR – 3 Легіслятивні обмеження: Зміни у законодавстві щодо захисту даних тварин, їх власників та використання GPS-технологій у тваринництві, які можуть вимагати додаткового витрат та змін у функціоналі системи для відповідності новим правилам.
BR – 4 Конкурентний тиск: Можливий ризик зростання конкуренції на ринку розумних нашийників для тварин, а також поява сильних конкурентів, які можуть пропонувати аналогічні або конкуруючі продукти з більш вигідними умовами.
BR – 5 Фінансові виклики: Ризик недостатніх фінансових ресурсів для розробки, масштабування та розвитку програмної системи, а також можливість непередбачуваних витрат через технічні проблеми або зміни в законодавстві.
BR – 6 Репутаційні ризики: Можливий ризик негативних відгуків та репутаційних проблем у випадку помилок у роботі системи, несправностей або неадекватної реакції на вимоги користувачів.
BR – 7 Технологічні обмеження: Ризик обмежень технологічних можливостей, таких як обмеження в місткості батареї для живлення нашийника або обмеження в покритті сигналу GPS, що можуть вплинути на функціональність та ефективність системи.
BR – 8 Екологічні ризики: Можливий ризик негативного впливу на навколишнє середовище через використання матеріалів у виробництві нашийників або можливість викиду шкідливих речовин під час експлуатації системи.


1.2 Концепція рішення


1.2.1 Окреслення концепції


Концепція програмної системи для відстеження життєвих показників тварин за допомогою розумних нашийників створена з метою зміни та вдосконалення підходу до догляду та відстеження тварин у різних сферах, включаючи домашніх улюбленців, тваринництво та дослідницькі програми. Мета полягає в тому, щоб забезпечити власникам тварин зручний, надійний та безпечний спосіб відстежування та моніторингу їхніх улюбленців


1.2.2 Головна функціональність


MF-1 Відстеження життєвих показників: Система забезпечує можливість постійного відстеження життєвих показників тварин, таких як температура тіла, 14 активність, пульс, та інші. Це дозволяє власникам та ветеринарам моніторити стан тварини та вчасно реагувати на будь-які зміни в її здоров'ї.
MF-2 Сповіщення та тривоги: Система надає можливість налаштовувати сповіщення та тривоги для власників тварин у випадку виявлення незвичайних або підозрілих показників життєдіяльності. Це дозволяє оперативно реагувати на потенційні проблеми та запобігати виникненню небезпеки для тварин.
MF-3 Ідентифікація тварин: Система забезпечує можливість ідентифікації тварин за допомогою унікальних ідентифікаторів, таких як мікрочіпи або RFIDмітки. Це допомагає власникам та ветеринарам відслідковувати та ідентифікувати тварин, що може бути корисним для їхнього управління та догляду.
MF-4 Геолокація та віддалений моніторинг: Система забезпечує можливість відстеження місцезнаходження тварин за допомогою GPS-технологій. Це дозволяє власникам відслідковувати рухи тварин та контролювати їхню активність навіть на відстані.
MF-5 Інтеграція зі смарт-додатками: Система може інтегруватися зі смартдодатками для мобільних пристроїв, що дозволяє власникам зручно контролювати та керувати доглядом за своїми тваринами з будь-якого місця та у будь-який час.
MF-6 Підтримка мультиплатформеності: Система забезпечує можливість роботи на різних платформах, включаючи комп'ютери, смартфони та планшети, що забезпечує зручний доступ та використання для користувачів у різних ситуаціях.


1.2.3 Припущення та залежності


Для коректної праці програмної системи, робимо наступні припущення:
A – 1 Усі розумні нашийники та датчики підключені до Інтернету та мають стабільний доступ до мережі для передачі даних про стан тварин та їхню локацію.
A – 2 Усі тварини, яким призначені нашийники, знаходяться в зоні покриття мережі Інтернет або GSM для забезпечення постійного зв'язку та спілкування з системою.
A – 3 Власники тварин мають доступ до смартфонів або комп'ютерів, що дозволяє їм встановлювати та взаємодіяти з мобільним додатком для керування нашийниками та отримання інформації про їх стан.
Залежності для програмної системи:
D – 1 Залежність від надійності та функціональності IoT пристроїв, що використовуються у нашийниках. Надійне функціонування цих пристроїв є важливим для збору та передачі даних про тварин та їх стан.
D – 2 Залежність від співпраці з ветеринарними клініками, тваринними притулками та іншими установами, які можуть використовувати систему для відстеження та керування тваринами. Партнерство з такими установами сприятиме поширенню та прийняттю системи на ринку.
D – 3 Залежність від відповідності законодавства щодо захисту даних про тварин та їх власників. Дотримання відповідних норм та стандартів забезпечить законність та довіру користувачів до системи.


1.3 Рамки та обмеження


1.3.1 Рамки первинного випуску


Система має наступні функції, які будуть реалізовані у першому релізі програмної системи та, які необхідні для запуску проєкту:
Серверна (back-end) частина:
IR – 1 Реєстрація користувача: Власники тварин можуть створити свій обліковий запис у системі.
IR – 2 Авторизація: Зареєстровані користувачі можуть ввійти в систему, використовуючи свої облікові дані.
IR – 3 Додавання тварин: Власники можуть додавати своїх тварин до системи та налаштовувати параметри відстеження.
IR – 4 Моніторинг життєвих показників: Система отримує та аналізує дані про здоров'я та активність тварин за допомогою нашийників.
IR – 5 Оповіщення про небезпеку: Система надсилає сповіщення власникам у разі виявлення поганих показників здоров'я або небезпеки для тварин.
Клієнтська (front-end) частина:
IR – 6 Інтерфейс користувача: Надання зручного та інтуїтивно зрозумілого інтерфейсу для власників тварин.
IR – 7 Перегляд даних: Власники можуть переглядати дані про здоров'я та активність своїх тварин через веб-інтерфейс.
IR – 8 Налаштування сповіщень: Користувачі можуть налаштовувати отримання сповіщень про погані показники здоров'я тварин.


1.3.2 Рамки наступних випусків


Виділено наступні функції, які не плануються у першому релізі системи, але плануються у наступних:
SR – 1 Розширення підтримки для нових видів тварин та розробка спеціалізованих датчиків для поліпшення точності збору даних.
SR – 2 Впровадження алгоритмів машинного навчання для прогнозування змін у стані здоров'я тварин на основі їх життєвих показників.
SR – 3 Розробка модулю для співпраці з ветеринарними клініками та іншими медичними установами для обміну даними та отримання консультацій.
SR – 4 Впровадження можливості віддаленого керування нашийником та його функціями через мобільний додаток.
SR – 5 Розширення системи оповіщення для включення автоматичних заходів у випадку виявлення критичних аномалій у стані тварин.
SR – 6 Розвиток інтеграції з платформами страхування та іншими сервісами для надання додаткових послуг власникам тварин.
SR – 7 Розширення функціоналу мобільного додатка для надання детальної інформації про стан тварин та їх історії здоров'я.
SR – 8 Запуск інтерактивних сервісів та програм для забезпечення фізичної активності та психологічного благополуччя тварин.
SR – 9 Реалізація системи віддаленого моніторингу здоров'я та активності тварин у реальному часі для ветеринарних лікарів та дослідників.
SR – 10 Впровадження інструментів для аналізу великих обсягів даних для виявлення тенденцій та паттернів у здоров'ї та активності тварин.

1.3.3 Обмеження та виключення


Програмна система має наступні обмеження:
L – 1 Законодавчі обмеження: Система повинна дотримуватися законів та нормативів щодо захисту даних та конфіденційності тварин у країнах, де вона використовується.
L – 2 Інтеграція існуючих систем: Обмеження пов'язані з інтеграцією системи з вже існуючими програмами, що використовуються у сфері ветеринарної медицини та догляду за тваринами.
L – 3 Підтримка та оновлення: Після впровадження системи необхідна буде постійна підтримка та оновлення, що може вимагати ресурсів та часу, щоб забезпечити безперебійну роботу системи.
L – 4 Технічні обмеження: Наявність застарілого апаратного та програмного забезпечення може вплинути на продуктивність та функціональність програмної системи.
Система також має наступні винятки, пов'язані з роботою цієї системи:
E – 1 Збої в мережі Інтернет: Проблеми з мережею Інтернет можуть викликати некоректну роботу компонентів системи, які взаємодіють з хмарними сервісами або серверами.
E – 2 Кібератаки: Система може бути вразливою до кібератак, що може призвести до порушення безпеки даних про тварин та їх власників.
E – 3 Оновлення та сумісність: Оновлення компонентів системи, включаючи програмне та апаратне забезпечення, можуть призвести до несумісності з іншими пристроями або програмами.
E – 4 Збої в роботі IoT пристроїв: Несправність або відключення IoT пристроїв, що використовуються у системі, може призвести до некоректної збору та передачі даних про тварин.
E – 5 Змінне законодавство: Зміни в законодавстві, що регулює обробку даних та захист прав тварин, можуть вимагати внесення змін у функціонал та політику системи.


1.4 Бізнес – контекст


1.4.1 Профілі зацікавлених сторін


Таблиця 1  – Профілі зацікавлених сторін
Зацікавлена сторона	Основна цінність	Ставлення	Основні інтереси	Обмеження
Власники тварин	Забезпечення здоров'я та безпеки своїх тварин	Позитивне: виявляють інтерес та підтримують систему, оскільки вона допомагає їм більш ефективно стежити за здоров'ям та станом своїх тварин.	Відстеження життєвих показників, вчасне сповіщення про проблеми, покращення якості догляду.	Обмеження бюджету на дорогоцінні технології, обмеження зв'язку з мережею Інтернет.
Ветеринари	Діагностика та лікування тваринництва, покращення професійної практики	Позитивне: сприймають систему як корисний інструмент для збору інформації про стан тварин, що полегшує їх роботу та допомагає забезпечити ефективну медичну допомогу.	Доступ до точних даних про стан тварин, можливість раннього виявлення проблем, співпраця з власниками та іншими фахівцями.	Обмеження доступу до технічних засобів та навичок використання системи.
Дослідники	Проведення наукових досліджень у галузі ветеринарії та зоології	Нейтральне: бачать систему як джерело цікавих даних для наукових досліджень, але можуть мати певні сумніви стосовно точності та достовірності інформації.	Доступ до анонімізованих даних для аналізу, співпраця з виробниками системи для проведення експериментів.	Обмеження доступу до конфіденційних даних та інформації.
Виробники технологій	Покращення та розширення ринку своїх продуктів, задоволення потреб клієнтів	Позитивне: активно підтримують систему, оскільки вона розширює їхні можливості в області розробки технологій для догляду за тваринами.	Розробка нових функцій та технологій, співпраця з власниками тварин та фахівцями.	Обмеження бюджету на дослідження та розробку, вимоги щодо безпеки та збереження даних.
Громадські організації, захисники тварин	Захист прав тварин, покращення умов їх утримання	Негативне: можуть висловлювати обурення щодо можливого порушення приватності та збирання даних про тварин і їх власників.	Моніторинг стану тварин, виявлення випадків жорстокого поводження, співпраця з органами влади.	Обмеження доступу до даних про тварин та їх власників, конфіденційність інформації.


1.4.2 Пріоритети проекту


Показник	Виконання
(етапи)	Обмеження
(граничні
значення)	Ступінь свободи
(допустимий діапазон)
План робіт	Первинний реліз програмної системи має бути доступний 30.05.2024 року
Функціональність			Усі функції з пункту 3.1 даного документу мають бути включені до первинного релізу програмної системи
Якість			У випуску первинного релізу мають бути реалізовані усі функції з пункту 3.1. Вони мають бути повністю робочі та протестовані
Персонал		Персонал складається з одного розробника
Ціна			Бюджет проекту відсутній


1.4.3 Робоче середовище



Програмна система має наступне робоче середовище:
OE – 1 Серверна\back-end частина буде розроблюватися на мові програмування JS з використанням фреймворку Node.js;
OE – 2 Клієнтська\front-end частина буде розроблена завдяки бібліотеці React та HTML5, CSS та JavaScript;
OE – 3 У якості СУБД обрано реляційну базу даних PostgreSQL;
OE – 4 Доступ до системи здійснюється через веб – застосунок (веб – доступ);
OE – 5 Система має коректно працювати при підключенні до мережі Інтернет, при великої кількості користувачів та великої кількості даних на сервері;
OE – 6 Усі компоненти мають утворювати цілісну програмну систему, один компонент системи не повинен змушувати інші компоненти некоректно працювати;

2 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	2.1 Проєктування серверної частини


	Першим чином виділимо акторів програмної системи, які будуть виконувати функції в системі:
	Користувач: людина, яка користується системою розумних нашийників.
	Адміністратор: користувач, який відповідає за виконання замовлень користувачами.
	Ветеринар: користувач, який може зареєструвати свою клініку в системі, та користуватися послугами записів в клініку.
	Зобразимо даних користувачів та відповідні їм доступні функції на Use-case діаграмі. На рисунку 2.1 наведено Use-case діаграму для звичайного користувача.


Рисунок 2.1 – Use-case діаграма для користувача
	На рисунку 2 наведено діаграму прецедентів для ветеринара.


Рисунок 2 – UML діаграма прецедентів для ветеринара

	На рисунку 3 наведено діаграму прецедентів для адміністратора.


Рисунок 3 – UML діаграма прецедентів для адміністратора

	Далі спроєктуєму UML діаграму станів нашої програмної системи.
	Для розробки діаграми станів були виділені такі процеси:
	Авторизація та реєстрація.
	Оформлення замовлення.
	Додавання тварин.
	Запис до клініки.
	Реєстрація клініки.
	Список замовлень.
	Розроблену діаграму станів наведено на рисунку 2.3


Рисунок 2.3 – UML діаграма станів програмної системи


	2.2 Опис бази даних та сховища даних


	Були виділені такі сутності в системі:
	Користувач: містить інформацію про всіх користувачів системи.
	Тварини: містить інформацію про всіх тварин системи.
	Ветеринарні клініки: містить інформацію про всі зареєстровані клініки в системі.
	Замовлення: замовлення, які здійснюють користувачі.
	Запис в клініку: записи, які здійснюють користувачі.
	Нашийник: інформація про зареєстрований нашийник в системі.
	Показники тварин: життєві показники тварин, які відстежуються нашийником.
	Усі дані нашої програмної системи є структурованими, тому було обрано саме реляційну модель для зберігання даних. В якості бази даних було обрано PostgreSQL.
	На рисунку 2.4 наведено ER-модель даних.


Рисунок 2.4 – ER-модель даних


	2.3 Архітектура серверної частини


	Архітектура проєкту базується на моделі MVC, яка передбачає розділення проєкту на окремі компоненти. В нашому випадку це такі компоненти:
–	     Models – моделі, класи, які описують сутності в базі даних.
–	Controllers – контролери, які обробляють дані користувачів і містять всю бізнес-логіку застосунку.
–	Routes – маршрути, які визначають, які дії виконуються при запиті до сервера.
–	     Config – файли конфігурації.
–	Middleware – файли для забезпечення безпеки.	Для взаємодії серверу з іншими програмними шарами використовується Rest API.


	2.4 Опис специфікації Rest API


	Для взаємодії серверу з іншими програмними шарами використовується Rest API. Опис специфікації Rest API наведено в таблиці А.1.


	2.5 Кодування серверної частини


	В проєкті реалізовано наступну бізнес логіку:
	Можливість реєстрації ветеринарної клініки в систему: реалізовано реєстрацію клініки користувачу з ролю ветеринара та запис до клініки звичайному користувачу. Приклад програмного коду, для реєстрації клініки та запису до неї в додатку Б.
	Розрахунок знижки при замовленні: реалізовано метод розрахунку знижки в залежності від кількості замовлених товарів. Програмний код методів наведено в додатку Б.


	2.6 Опис дотриманих вимог щодо захисту даних та безпеки в системі


	Відповідно до вимог у проєкті використовуються такі методи захисту даних:
	Хешування паролів: паролі користувачів, які зберігаються в базі даних захешовані, щоб ніхто не міг отримати до них доступ.
	JWT токен: при авторизації користувача генерується JSON Web Token, який має час існування 24 години. За допомогою цього токену сервер перевіряє, чи дійсно користувач авторизувався в системі та надає доступ до функціоналу.


	2.7 Реалізація локалізації та інтернаціоналізації в системі


	Відповідно до вимог до локалізації та інтернаціоналізації користувач може отримати текстові дані як англійською, так й українською мовою.

















3 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
	3.1 Архітектура клієнтської частини


	Архітектура клієнтської частини програмної системи складається таким чином:
	App – головний компонент системи, вхідна точка програми.
	Styles – CSS стилі веб-сторінок.
	Components – компоненти клієнтської частини.
	Services – сервісні файли клієнтської частини.
	Img – зображення, які використовуються на веб-сторінках.
	Побудуємо діаграму пакетів, яка відобразить структуру клієнтської частини.


Рисунок 3.1 – UML діаграма пакетів клієнтської частини програмної системи


	Далі спроєктуємо та створимо UML діаграму компонентів клієнтської частини.
	Для розробки діаграми компонентів були виділені такі структурні компоненти клієнтської частини:
	IoT – розумний нашийник.
	Order – замовлення користувача.
	Clinic – ветеринарні клініки.
	Appointment – записи в клініку.
	Розроблена UML діаграма компонентів наведена на рисунку 3.2.


Рисунок 3.2 – UML діаграма компонентів для клієнтської частини програмної системи


	3.2 Кодування клієнтської частини


	Клієнтська частина надає графічний інтерфейс для відображення реалізованої бізнес логіки:
	Інтеграція з ветеринарними клініками. Клієнтська частина надає графічний інтерфейс для реєстрування ветеринарних клінік в систему та можливість онлайн запису до клініки користувачами. У додатку В наведено програмний код сторінки ClinicRegister, де відбувається процес реєстрації клініки ветеринаром. У додатку В наведено програмний код сторінки AllClinics де відбувається процес обрання клініки для. У додатку В наведено програмний код сторінки AppointmentForm, де відбувається запис до клініки після обрання клініки.
	Розрахунок знижки при оформленні замовлення. Користувач має змогу отримати знижку 5% при покупці 3, або більше нашийників, і 10%, якщо більше 10 нашийників. Програмний код сторінки OrderForm для оформлення замовлення наведено в додатку В. Також в додатку В наведено програмний код сторінки AllOrders, на якій адміністратор може переглядати всі звмовлення.
	Відповідно до вимог до захисту даних, паролі користувачів не відображаються та зберігаються в хешованому вигляді. Також при авторизації кожному користувачу генерується його унікальний токен доступу при кожній сесії, який зберігається в локальному сховищі веб сайту.














ВИСНОВКИ


	В результаті виконання курсової роботи була спроектована та розроблена програмна система для відстеження життєвих показників тварин за допомогою розумних нашийників. Ця система складається з серверної та клієнтської частин. Вона є комплексним рішенням для моніторингу здоров'я і активності тварин, аналізу їхньої поведінки, а також для своєчасного виявлення можливих проблем зі здоров'ям.
	Програмна система була розроблена з дотриманням усіх вимог щодо захисту даних і безпеки, локалізації та інтернаціоналізації. Також у системі реалізовано можливості адміністрування, управління даними користувачів, а також можливість експорту даних. Було реалізовано складну бізнес-логіку, яка використовує математичні методи для обробки даних користувачів.
	Увесь запланований функціонал було реалізовано не в повному обсязі.
	Розроблена програмна система може застосовуватись у сферах ветеринарії, догляду за домашніми улюбленцями, а також для моніторингу активності і здоров'я тварин.












ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Node.js documentation – URL: https://nodejs.org/docs/latest/api/ (дата звернення 30.03.2024)
2.	React documentation – URL: https://legacy.reactjs.org/docs/getting-started.html (дата звернення 20.04.2024)
3.	PostgreSQL documentation – URL: https://www.postgresql.org/docs/ (дата звернення 30.03.2024)
4.	ChatGpt AI – URL: https://chatgpt.com (дата звернення 30.03.2024)
5.	Відеоматеріали реалізованого проєкту в YouTube – URL: https://youtu.be/ehvsgmCh9XU.



















ДОДАТОК А
Специфікація REST


	Таблиця А.1 – REST специфікація
Контролер	Метод	URL	Опис
Тварини	POST	/add	Додати тварину
	GET	/all	Отримати список тварин
Записи до клініки	GET	/all	Отримати усі записи певної клініки
	POST	/new	Створити новий запис в клініку
Користувач	POST	/login	Авторизація користувача
	POST	/registration	Реєстрація користувача
Замовлення	POST	/add	Створення нового замовлення користувачем
	GET	/all	Виведення списку всіх замовлень
Ветеринарні клініки	POST	/add	Реєстрація нової клініки
	GET	/view	Відображення інформації про клініку певного ветеринара
	GET	/all	Відображення всіх клінік





















ДОДАТОК Б
Програмний код серверної частини

1  exports.registerClinic = (req, res) => {
2      const { clinicName, email, phone, address, description } = req.body
3      const userId = req.user.id
4
5      if (!clinicName || !email || !phone || !address || !description) {
6          return res.status(400).json({ message: "Усі поля повинні бути заповнені" })
7      }
8
9      const newClinic = new VetClinic({ userId, clinicName, email, phone, address, description })
10     newClinic.save()
11         .then(() => {
12             res.status(201).json({ message: "Клініка успішно додана" })
13         })
14         .catch(error => {
15             console.error(error)
16             res.status(500).json({ message: "Помилка при збереженні клініки" })
17         })
18 }

Програмний код для запису до клініки


1  exports.addAppointment = async (req, res) => {
2      try {
3          const { clinicId, animalId, date, time, description } = req.body
4
5          const userId = req.user.id
6
7          const newAppointment = new Appointment({
8              userId,
9              clinicId,
10             animalId,
11             date,
12             time,
13             description
14         })
15
16         await newAppointment.save()
17
18         res.status(201).json({ message: 'Запис до ветеринарної клініки успішно створено', appointment: newAppointment })
19     } catch (error) {
20         console.error(error)
21         res.status(500).json({ message: 'Помилка сервера при додаванні запису до ветеринарної клініки' })
22     }
23 }


Програмний код для методу розрахунку знижки
1  exports.createOrder = async (req, res) => {
2      try {
3          const { deviceQuantity, comment } = req.body
4          const userId = req.user.id
5
6          if (!deviceQuantity) {
7              return res.status(400).json({ message: "Кількість пристроїв повинна бути вказана" })
8          }
9
10         const pricePerDevice = 2000
11         let discount = 0
12
13         if (deviceQuantity > 10) {
14             discount = 0.10
15         } else if (deviceQuantity > 3) {
16             discount = 0.05
17         }
18
19         const totalPrice = deviceQuantity * pricePerDevice
20         const discountedPrice = totalPrice * (1 - discount)
21
22         const newOrder = new Order({ userId, deviceQuantity, totalPrice: discountedPrice, date: new Date(), comment })
23         await newOrder.save()
24
25         res.status(201).json({ message: "Замовлення успішно створено", order: newOrder })
26     } catch (error) {
27         console.error(error)
28         res.status(500).json({ message: "Помилка при створенні замовлення" })
29     }
30 }














ДОДАТОК В
Програмний код клієнтської частини
Програмний код сторінки ClinicRegister

1  import React, { useState } from 'react'
2  import axios from 'axios'
3  import styles from './ClinicRegister.module.css'
4
5  const ClinicRegister = ({ onClose }) => {
6    const [clinicName, setClinicName] = useState('')
7    const [email, setEmail] = useState('')
8    const [phone, setPhone] = useState('')
9    const [address, setAddress] = useState('')
10   const [description, setDescription] = useState('')
11   const [successMessage, setSuccessMessage] = useState('')
12
13   const handleSubmit = async (event) => {
14     event.preventDefault()
15     const token = localStorage.getItem('token')
16
17     try {
18       await axios.post('http://localhost:8080/api/vetClinic/add',
19         { clinicName, email, phone, address, description },
20         {
21           headers: {
22             Authorization: token
23           }
24         }
25       )
26       setSuccessMessage('Клініка успішно зареєстрована!')
27       setTimeout(() => {
28         setSuccessMessage('')
29         onClose()
30       }, 3000)
31     } catch (error) {
32       console.error('Помилка при реєстрації клініки:', error)
33     }
34   }
35
36   return (
37     <div className={styles.formContainer}>
38       <form onSubmit={handleSubmit} className={styles.form}>
39         <h2>Реєстрація клініки</h2>
40         <input
41           type="text"
42           value={clinicName}
43           onChange={(e) => setClinicName(e.target.value)}
44           placeholder="Назва клініки"
45           required
46         />
47         <input
48           type="email"
49           value={email}
50           onChange={(e) => setEmail(e.target.value)}
51           placeholder="Email"
52           required
53         />
54         <input
55           type="tel"
56           value={phone}
57           onChange={(e) => setPhone(e.target.value)}
58           placeholder="Телефон"
59           required
60         />
61         <input
62           type="text"
63           value={address}
64           onChange={(e) => setAddress(e.target.value)}
65           placeholder="Адреса"
66           required
67         />
68         <textarea
69           value={description}
70           onChange={(e) => setDescription(e.target.value)}
71           placeholder="Опис"
72           required
73         />
74         <button type="submit">Зареєструвати</button>
75         <button type="button" onClick={onClose}>Закрити</button>
76       </form>
77       {successMessage && <p className={styles.successMessage}>{successMessage}</p>}
78     </div>
79   )
80 }
81
82 export default ClinicRegister [totalPrice, setTotalPrice] = useState(0);

Програмниий код сторінки AllClinics

1  import React, { useState, useEffect } from 'react'
2  import axios from 'axios'
3  import { useNavigate } from 'react-router-dom'
4  import styles from './AllClinics.module.css'
5
6  const AllClinics = () => {
7    const [clinics, setClinics] = useState([])
8    const [error, setError] = useState('')
9    const navigate = useNavigate()
10
11   useEffect(() => {
12     fetchAllClinics()
13   }, [])
14
15   const fetchAllClinics = async () => {
16     try {
17       const response = await axios.get('http://localhost:8080/api/vetClinic/all')
18       console.log('Response data:', response.data)
19       setClinics(response.data)
20     } catch (error) {
21       console.error('Помилка при отриманні інформації про клініки:', error)
22       setError('Не вдалося отримати інформацію про клініки')
23     }
24   }
25
26   const handleClinicClick = (clinicId) => {
27     navigate(`/appointment/${clinicId}`)
28   }
29
30   return (
31     <div className={styles.clinicContainer}>
32       <h2>Всі клініки</h2>
33       {error && <p className={styles.error}>{error}</p>}
34       {clinics.length > 0 ? (
35         clinics.map((clinic) => (
36           <div
37             key={clinic.id}
38             className={styles.clinicInfo}
39             onClick={() => handleClinicClick(clinic._id)}
40           >
41             <p><strong>Назва:</strong> {clinic.clinicName}</p>
42             <p><strong>Email:</strong> {clinic.email}</p>
43             <p><strong>Телефон:</strong> {clinic.phone}</p>
44             <p><strong>Адреса:</strong> {clinic.address}</p>
45             <p><strong>Опис:</strong> {clinic.description}</p>
46           </div>
47         ))
48       ) : (
49         <p>Немає доступних клінік.</p>
50       )}
51     </div>
52   )
53 }
54
55 export default AllClinics

Програмний код сторінки AppointmentForm

1  import React, { useState, useEffect } from 'react'
2  import { useParams, useNavigate } from 'react-router-dom'
3  import axios from 'axios'
4  import styles from './AppointmentForm.module.css'
5
6  const AppointmentForm = () => {
7    const { clinicId } = useParams()
8    const [pets, setPets] = useState([])
9    const [selectedPetId, setSelectedPetId] = useState('')
10   const [date, setDate] = useState('')
11   const [time, setTime] = useState('')
12   const [description, setDescription] = useState('')
13   const [message, setMessage] = useState('')
14   const [error, setError] = useState('')
15   const navigate = useNavigate()
16
17   useEffect(() => {
18     fetchPets()
19   }, [])
20
21   const fetchPets = async () => {
22     const token = localStorage.getItem('token')
23     if (!token) {
24       setError('Токен не знайдено')
25       return
26     }
27
28     try {
29       const response = await axios.get('http://localhost:8080/api/animals/all', {
30         headers: {
31           Authorization: token,
32         },
33       })
34       setPets(response.data)
35     } catch (error) {
36       console.error('Помилка при отриманні тварин:', error)
37       setError('Не вдалося отримати тварини')
38     }
39   }
40
41   const handleSubmit = async (e) => {
42     e.preventDefault()
43     const token = localStorage.getItem('token')
44     const userId = localStorage.getItem('userId')
45
46     if (!token) {
47       setError('Токен не знайдено')
48       return
49     }
50
51     const appointmentData = {
52       userId,
53       clinicId,
54       animalId: selectedPetId,
55       date,
56       time,
57       description,
58     }
59
60     try {
61       await axios.post('http://localhost:8080/api/appointment/new', appointmentData, {
62         headers: {
63           Authorization: token,
64         },
65       })
66       setMessage('Запис до клініки успішний')
67       setTimeout(() => {
68         setMessage('')
69         navigate('/')
70       }, 3000)
71     } catch (error) {
72       console.error('Помилка при створенні запису:', error)
73       setError('Не вдалося створити запис')
74     }
75   }
76
77   return (
78     <div className={styles.appointmentFormContainer}>
79       <h2>Запис до клініки</h2>
80       {error && <p className={styles.error}>{error}</p>}
81       {message && <p className={styles.success}>{message}</p>}
82       <form onSubmit={handleSubmit} className={styles.form}>
83         <label>
84           Виберіть тварину:
85           <select value={selectedPetId} onChange={(e) => setSelectedPetId(e.target.value)} required>
86             <option value="">Виберіть тварину</option>
87             {pets.map((pet) => (
88               <option key={pet._id} value={pet._id}>
89                 {pet.name} ({pet.species})
90               </option>
91             ))}
92           </select>
93         </label>
94         <label>
95           Дата:
96           <input type="date" value={date} onChange={(e) => setDate(e.target.value)} required />
97         </label>
98         <label>
99           Час:
100          <input type="time" value={time} onChange={(e) => setTime(e.target.value)} required />
101        </label>
102        <label>
103          Опис:
104          <textarea value={description} onChange={(e) => setDescription(e.target.value)} required />
105        </label>
106        <button type="submit">Записатися</button>
107      </form>
108    </div>
109  )
110 }
111
112 export default AppointmentForm


Програмний код сторінки OrderForm
1  import React, { useState } from 'react'
2  import axios from 'axios'
3  import styles from './OrderForm.module.css'
4
5  const OrderForm = ({ onClose }) => {
6    const [deviceQuantity, setDeviceQuantity] = useState('')
7    const [comment, setComment] = useState('')
8    const [successMessage, setSuccessMessage] = useState('')
9
10   const handleSubmit = async (event) => {
11     event.preventDefault()
12     const token = localStorage.getItem('token')
13
14     try {
15       await axios.post(
16         'http://localhost:8080/api/order/add',
17         { deviceQuantity, comment },
18         {
19           headers: {
20             Authorization: `${token}`
21           }
22         }
23       )
24       setSuccessMessage('Замовлення успішно створено!')
25       setTimeout(() => {
26         setSuccessMessage('')
27         onClose()
28       }, 3000)
29     } catch (error) {
30       console.error('Помилка при створенні замовлення:', error)
31     }
32   }
33
34   return (
35     <div className={styles.formContainer}>
36       <form onSubmit={handleSubmit} className={styles.form}>
37         <h2>Замовити девайси</h2>
38         <input
39           type="number"
40           value={deviceQuantity}
41           onChange={(e) => setDeviceQuantity(e.target.value)}
42           placeholder="Кількість девайсів"
43           required
44         />
45         <textarea
46           value={comment}
47           onChange={(e) => setComment(e.target.value)}
48           placeholder="Коментар"
49         />
50         <button type="submit">Замовити</button>
51         <button type="button" onClick={onClose}>Закрити</button>
52       </form>
53       {successMessage && <p className={styles.successMessage}>{successMessage}</p>}
54     </div>
55   )
56 }
57
58 export default OrderForm
Програмний код сторінки AllOrders
1  import React, { useState, useEffect } from 'react'
2  import axios from 'axios'
3  import styles from './AllOrders.module.css'
4
5  const AllOrders = () => {
6    const [orders, setOrders] = useState([])
7    const [error, setError] = useState('')
8
9    useEffect(() => {
10     fetchOrders()
11   }, [])
12
13   const fetchOrders = async () => {
14     const token = localStorage.getItem('token')
15     if (!token) {
16       setError('Токен не знайдено')
17       return
18     }
19
20     try {
21       const response = await axios.get('http://localhost:8080/api/order/all', {
22         headers: {
23           Authorization: token,
24         },
25       })
26       setOrders(response.data)
27     } catch (error) {
28       console.error('Помилка при отриманні замовлень:', error)
29       setError('Не вдалося отримати замовлення')
30     }
31   }
32
33   const handleDeleteOrder = async (orderId) => {
34     const token = localStorage.getItem('token')
35     if (!token) {
36       setError('Токен не знайдено')
37       return
38     }
39
40     try {
41       await axios.delete(`http://localhost:8080/api/order/${orderId}`, {
42         headers: {
43           Authorization: token,
44         },
45       })
46       fetchOrders()
47     } catch (error) {
48       console.error('Помилка при видаленні замовлення:', error)
49       setError('Не вдалося видалити замовлення')
50     }
51   }
52
53   return (
54     <div className={styles.ordersContainer}>
55       <h2>Всі замовлення</h2>
56       {error && <p className={styles.error}>{error}</p>}
57       <div className={styles.ordersGrid}>
58         {orders.map((order) => (
59           <div key={order._id} className={styles.orderCard}>
60             <h3>Користувач: {order.userId.name}</h3>
61             <p>Email: {order.userId.email}</p>
62             <p>Кількість пристроїв: {order.deviceQuantity}</p>
63             <p>Загальна вартість: {order.totalPrice} грн</p>
64             <p>Дата: {new Date(order.date).toLocaleDateString()}</p>
65             {order.comment && <p>Коментар: {order.comment}</p>}
66             <button onClick={() => handleDeleteOrder(order._id)} className={styles.deleteButton}>
67               Видалити запис
68             </button>
69           </div>
70         ))}
71       </div>
72     </div>
73   )
74 }
75
76 export default AllOrders



